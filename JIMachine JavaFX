
package com.example.jimachine;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextInputDialog;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class JIMachine extends Application {
    private ImageView imageView;
    private Button originalSizeButton;
    private Button zoomOutButton = new Button("Zoom Out");
    private Button openButton;
    private Button nextButton;
    private Button prevButton;
    private Button thumbnailButton;
    private Button captionButton;
    private Button saveButton; // New save button
    private List<File> album;
    private int currentImageIndex;
    private VBox thumbnailPane;

    private String currentCaption;
    private File currentFile = new File("path/to/file");

    public JIMachine() {
    }

    @Override
    public void start(Stage stage) {
        // Initialize UI components
        imageView = new ImageView();
        imageView.setPreserveRatio(false);
        Button zoomInButton = new Button("Zoom In");
        originalSizeButton = new Button("100%");
        zoomOutButton = new Button("Zoom Out");
        openButton = new Button("Open");
        nextButton = new Button("Next");
        prevButton = new Button("Previous");
        thumbnailButton = new Button("Thumbnails");
        captionButton = new Button("Caption");
        saveButton = new Button("Save Album");
        Button openAlbumButton = new Button("Open Album");
        thumbnailPane = new VBox(10);
        album = getCurrentDirectoryFiles();
        currentImageIndex = 0;

        // Set event handlers
        zoomInButton.setOnAction(event -> zoomImage(1.25));
        originalSizeButton.setOnAction(event -> setOriginalSize());
        zoomOutButton.setOnAction(event -> zoomImage(0.8));
        openButton.setOnAction(event -> openImage(stage));
        nextButton.setOnAction(event -> showNextImage());
        prevButton.setOnAction(event -> showPrevImage());
        thumbnailButton.setOnAction(event -> showThumbnails());
        captionButton.setOnAction(event -> setCaption());
        saveButton.setOnAction(event -> saveAlbum(stage));
        openAlbumButton.setOnAction(event -> openAlbum(stage));

        HBox buttonPane = new HBox(10, openButton, zoomInButton, originalSizeButton, zoomOutButton, prevButton, nextButton, thumbnailButton, captionButton, saveButton, openAlbumButton);

        HBox newButtonPane = new HBox(10, openButton, zoomInButton, originalSizeButton, zoomOutButton, prevButton, nextButton, thumbnailButton, captionButton, saveButton, openAlbumButton);
        newButtonPane.setPadding(new Insets(10));
        newButtonPane.setAlignment(Pos.CENTER);

        // Add components to root pane
        BorderPane root = new BorderPane();
        root.setCenter(imageView);
        root.setBottom(buttonPane);

        // Set initial button states
        updateButtonStates();

        // Display default image
        Image image = new Image("file:///path/to/image.jpg");
        ImageView imageView = new ImageView(image);

        // Create scene and show stage
        Scene scene = new Scene(root, 800, 600);
        stage.setScene(scene);
        stage.setTitle("JIMachine");
        stage.show();
    }


    private List<File> getCurrentDirectoryFiles() {
        File currentDirectory = new File(".");
        File[] files = currentDirectory.listFiles((dir, name) -> name.matches(".*\\.(jpg|jpeg|png|gif)$"));
        if (files != null) {
            return Arrays.asList(files);
        }
        return new ArrayList<>();
    }
    private void openImage(Stage stage) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Open Image File");
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg", "*.gif")
        );
        File selectedFile = fileChooser.showOpenDialog(stage);
        if (selectedFile != null) {
            currentFile = selectedFile;
            currentImageIndex = album.indexOf(currentFile);
            displayImage(currentFile);
        }
        updateButtonStates();
    }

    private void showNextImage() {
        if (currentImageIndex < album.size() - 1) {
            currentImageIndex++;
            currentFile = album.get(currentImageIndex);
            displayImage(currentFile);
        }
        updateButtonStates();
    }
    private void openAlbum(Stage stage) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Open Album");
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg", "*.gif")
        );
        List<File> selectedFiles = fileChooser.showOpenMultipleDialog(stage);
        if (selectedFiles != null) {
            album.addAll(selectedFiles);
            currentImageIndex = album.size() - 1;
            currentFile = album.get(currentImageIndex);
            displayImage(currentFile);
            updateButtonStates();
        }
    }


    private void showPrevImage() {
        if (currentImageIndex > 0) {
            currentImageIndex--;
            currentFile = album.get(currentImageIndex);
            displayImage(currentFile);
        }
        updateButtonStates();
    }

    private void showThumbnails() {
        if (thumbnailPane.getChildren().isEmpty()) {
            thumbnailPane.getChildren().addAll(album.stream()
                    .map(file -> {
                        ImageView thumbView = new ImageView(new Image(file.toURI().toString()));
                        thumbView.setFitHeight(50);
                        thumbView.setPreserveRatio(true);
                        thumbView.setOnMouseClicked(event -> {
                            currentFile = file;
                            currentImageIndex = album.indexOf(currentFile);
                            displayImage(currentFile);
                            updateButtonStates();
                        });
                        return thumbView;
                    })
                    .toList());
        } else {
            thumbnailPane.getChildren().clear();
        }
    }

    private void setCaption() {
        TextInputDialog dialog = new TextInputDialog(currentCaption);
        dialog.setTitle("Caption");
        dialog.setHeaderText(null);
        dialog.setContentText("Enter caption:");
        Optional<String> result = dialog.showAndWait();
        if (result.isPresent()) {
            currentCaption = result.get();
            displayImage(currentFile);
        }
    }

    private void zoomImage(double zoomFactor) {
        imageView.setScaleX(imageView.getScaleX() * zoomFactor);
        imageView.setScaleY(imageView.getScaleY() * zoomFactor);
        updateButtonStates();
    }

    private void setOriginalSize() {
        imageView.setScaleX(1.0);
        imageView.setScaleY(1.0);
        updateButtonStates();
    }

    private void updateButtonStates() {
        nextButton.setDisable(currentImageIndex == album.size() - 1);
        prevButton.setDisable(currentImageIndex == 0);
        thumbnailButton.setText(thumbnailPane.getChildren().isEmpty() ? "Thumbnails" : "Hide Thumbnails");
        captionButton.setText(currentCaption == null ? "Caption" : "Edit Caption");
        saveButton.setDisable(album.isEmpty()); // Disable save button if album is empty
    }

    private void displayImage(File file) {
        try {
            Image image = new Image(file.toURI().toString());
            imageView.setImage(image);
        } catch (Exception ex) {
            System.err.println("Failed to display image: " + ex.getMessage());
        }
    }



    private void saveAlbum(Stage stage) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Save Album");
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Text Files", "*.txt")
        );
        File selectedFile = fileChooser.showSaveDialog(stage);
        if (selectedFile != null) {
            try (BufferedWriter writer = Files.newBufferedWriter(selectedFile.toPath())) {
                for (File file : album) {
                    writer.write(file.getAbsolutePath());
                    writer.newLine();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void loadAlbum(Stage stage) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Load Album");
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Text Files", "*.txt")
        );
        File selectedFile = fileChooser.showOpenDialog(stage);
        if (selectedFile != null) {
            List<File> files = new ArrayList<>();
            try (BufferedReader reader = Files.newBufferedReader(selectedFile.toPath())) {
                String line;
                while ((line = reader.readLine()) != null) {
                    File file = new File(line);
                    if (file.exists() && !files.contains(file)) {
                        files.add(file);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            if (!files.isEmpty()) {
                album.clear();
                album.addAll(files);
                currentImageIndex = 0;
                currentFile = album.get(0);
                displayImage(currentFile);
                updateButtonStates();
            }
        }
    }

    private void exitApplication() {
        Platform.exit();
    }

    public static void main(String[] args) {
        launch(args);
    }

}
